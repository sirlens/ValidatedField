// utils/snackbar_extensions.dart
import 'package:flutter/material.dart';
import 'package:ramo_sales/core/config/general_theme.dart';

extension SnackBarExtension on BuildContext {
  void _hideCurrentSnackBar() {
    ScaffoldMessenger.of(this).hideCurrentSnackBar(
      reason: SnackBarClosedReason.dismiss,
    );
  }

  // Método personalizado con más opciones
  void showCustomSnackBar({
    Color? textColor,
    required String message,
    Color? backgroundColor,
    Duration? duration,
    SnackBarBehavior? behavior,
    Widget? icon,
  }) {
    _hideCurrentSnackBar();

    ScaffoldMessenger.of(this).showSnackBar(
      SnackBar(
        closeIconColor: textColor,
        content: Row(
          children: [
            if (icon != null) icon,
            SizedBox(width: icon != null ? 10 : 0),
            Expanded(
                child: Text(
              message,
              style: TextStyle(color: textColor),
            )),
          ],
        ),
        showCloseIcon: true,
        duration: duration ?? const Duration(seconds: 5),
        behavior: behavior ?? SnackBarBehavior.floating,
        backgroundColor: backgroundColor ?? Colors.blue,
        dismissDirection: DismissDirection.endToStart,
        animation: CurvedAnimation(
          parent: const AlwaysStoppedAnimation(1),
          curve: Curves.easeInOut,
        ),
      ),
    );
  }

  // Método específico para éxito
  void showSuccessSnackBar(String message) {
    showCustomSnackBar(
      textColor: GeneralTheme.bGRamoTitle,
      duration: const Duration(seconds: 5),
      message: message,
      backgroundColor: GeneralTheme.greenRamo,
      icon: const Icon(Icons.check_circle, color: GeneralTheme.bGRamoTitle),
    );
  }

  // Método específico para advertencia
  void showWarningSnackBar(String message) {
    showCustomSnackBar(
      textColor: GeneralTheme.shadowRamo,
      duration: const Duration(seconds: 5),
      message: message,
      backgroundColor: GeneralTheme.colorOrange,
      icon: const Icon(Icons.warning, color: GeneralTheme.shadowRamo),
    );
  }

  // Método específico para error
  void showErrorSnackBar(String message) {
    showCustomSnackBar(
      textColor: GeneralTheme.letterRamo,
      duration: const Duration(seconds: 5),
      message: message,
      backgroundColor: GeneralTheme.colorRedRamo,
      icon: const Icon(Icons.error_outline_rounded, color: GeneralTheme.letterRamo),
    );
  }

  // Método específico para error
  void showInfoSnackBar(String message) {
    showCustomSnackBar(
      textColor: GeneralTheme.greenRamo,
      duration: const Duration(seconds: 5),
      message: message,
      backgroundColor: GeneralTheme.shadowRamo,
      icon: const Icon(Icons.info_outline_rounded, color: GeneralTheme.greenRamo),
    );
  }
}
